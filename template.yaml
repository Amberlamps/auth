AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  AppUrl:
    Type: String
  AuthUrl:
    Type: String
  GoogleClientId:
    Type: String
    Default: not_set
  GoogleClientSecret:
    Type: String
    Default: not_set
  CookieName:
    Type: String
    Default: 'r_id'
  CookieExpiresIn:
    Type: String
    Default: '315360000'
  TokenExpiresIn:
    Type: String
    Default: 15m

Globals:
  Function:
    Runtime: nodejs16.x
    Environment:
      Variables:
        TABLE_NAME: !Sub ${AWS::StackName}-table
        APP_URL: !Ref AppUrl
        AUTH_URL: !Ref AuthUrl
        COOKIE_NAME: !Ref CookieName
        COOKIE_EXPIRES_IN: !Ref CookieExpiresIn
        TOKEN_EXPIRES_IN: !Ref TokenExpiresIn
  
Resources:

  DynamoDbTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-table
      AttributeDefinitions:
        - AttributeName: pk
          AttributeType: S
        - AttributeName: sk
          AttributeType: S
        - AttributeName: data1
          AttributeType: S
      KeySchema:
        - AttributeName: pk
          KeyType: HASH
        - AttributeName: sk
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      LocalSecondaryIndexes:
        - IndexName: lsi1
          KeySchema:
            - AttributeName: pk
              KeyType: HASH
            - AttributeName: data1
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      GlobalSecondaryIndexes:
        - IndexName: gsi1
          KeySchema:
            - AttributeName: data1
              KeyType: HASH
            - AttributeName: pk
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  AuthApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors:
        AllowMethods: "'POST, GET, OPTIONS, DELETE, PUT, PATCH'"
        AllowOrigin: !Sub 
          - "'${AppUrl}'"
          - AppUrl: !Ref AppUrl
        AllowHeaders: "'Origin, X-Requested-With, Content-Type, Accept, Auhtorization'"
        AllowCredentials: true

  TokensPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/tokens
      Handler: tokens-post.handler
      Environment:
        Variables:
          JWKS_SECRET_NAME: !Sub ${AWS::StackName}-jwks
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /tokens
            Method: post
            RestApiId: !Ref AuthApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${AWS::StackName}-table
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref JwksSecret

  LoginPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/login
      Handler: login-post.handler
      Environment:
        Variables:
          GOOGLE_CLIENT_ID: !Ref GoogleClientId
          GOOGLE_CLIENT_SECRET: !Ref GoogleClientSecret
          JWKS_SECRET_NAME: !Sub ${AWS::StackName}-jwks
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId: !Ref AuthApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${AWS::StackName}-table
        - AWSSecretsManagerGetSecretValuePolicy:
            SecretArn: !Ref JwksSecret

  MeGet:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/me
      Handler: me-get.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /me
            Method: get
            RestApiId: !Ref AuthApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${AWS::StackName}-table

  LogoutPost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/logout
      Handler: logout-post.handler
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /logout
            Method: post
            RestApiId: !Ref AuthApi
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Sub ${AWS::StackName}-table

  JwksRotationFunc:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/jwks-rotation
      Handler: jwks-rotation.handler
      FunctionName: !Sub ${AWS::StackName}-jwks-rotation
      Policies: 
        - AWSSecretsManagerRotationPolicy:
            FunctionName: !Sub ${AWS::StackName}-jwks-rotation

  JwksLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      DependsOn: JwksRotationFunc
      Properties:
        FunctionName: !GetAtt JwksRotationFunc.Arn
        Action: lambda:InvokeFunction
        Principal: 'secretsmanager.amazonaws.com'

  JwksSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-jwks

  JwksRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    Properties:
      SecretId: !Ref JwksSecret
      RotationLambdaARN: !GetAtt JwksRotationFunc.Arn
      RotationRules:
        AutomaticallyAfterDays: 30

Outputs:
  AuthApi:
    Description: "API Gateway endpoint URL for Prod stage for AuthApi"
    Value: !Sub "https://${AuthApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"
